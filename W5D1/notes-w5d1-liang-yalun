Memory 的作用: 所有的代码和数据都要从 memory 里读写.

内存技术 - Memory Technology: 如何才能使得空间具有记忆能力?

从电路上, 状态逻辑 (stateful logic) 可以实现. 例如最早的继电器电路. 用门电路可以实现 latch.
用可磁化的介质做数据存储, 磁化状态就是 1, 消磁状态就是 0.
用电容的充放电也可以存储数据. 内存 (DRAM) 一般是用电容做的. 电容充放电的时间比较难以降低, 这使得相对 CPU (Moore’s Law) 来说, memory 的发展速度要慢很多.

没有一种存储技术能做到又大又快又便宜.

内存接口: DRAM 和 CPU 如何相连?

接口传的主要是地址和数据. 还有一个 bit 表示要读还是写. 如果地址线是 n-bit 的, 就意味着地址空间是 2^n 的.
问题: 现在有若干个每个地址存 1 个 bit 的 DRAM, 这些 DRAM 的地址空间是 1 Ki 的. 我们希望有一个地址空间 64 Ki 的, 每个地址存一个 byte 的存储器. 如何实现?
1 个 bit -> 8 个 bit 只要组合一下 data 线即可, 8 个 DRAM 编为一组. 用高 6 位来作为编组的地址, 低 10 位作为编组内的地址. 取高 6 位的装置称作「6-64 译码器 (6-64 decoder)」.

接口的时序 - Timing.

地址空间大了之后发现, 芯片的引脚不够用了; 因为芯片的大小比较小, 物理上没法放下那么多引脚. 因此, 我们将地址分两次传输, 高 n 位和低 n 位分开.

                                            |<------ DRAM Read Cycle ------>|
RAS_L - Row Address Select (low is on)  ^^^^\_______________________/^^^^^^^\______________________/^^^^
CAS_L - Col Address Select (low is on)  ^^^^^^^^^^^^^^^^^\__________/^^^^^^^^^^^^^^^^^^\___________/^^^^
A     - Address                         ---- RowAddr -- ColAddr -- Junk -- RowAddr -- ColAddr -- Junk --
WE_L  - Write Enable       (low is on)  __/^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
OE_L  - Output Enable      (low is on)  ^^^^^^^^^^^^^^\_____________/^^^^^^^^^^^^^^^^^^^^^^\_______/^^^^
D     - Data                            High Z    -- Junk -- Data Out   -- High Z           -- Data Out
                                        ^^^^^^        |<---->|                             |<->|
                                        高阻态         Read Access Time                     Output Enable Delay
